#naming convention:
#  function.FEATURE/argument.number, e.g.
#  tex.usedims.1

test <- texr:::test

m <- matrix(1:4, nrow = 2, ncol = 2)
reset_label_count()

# ***TESTS OF tex***

#test the simplest output
test("texmatrix.VALUE.1", tex(m), 
     c("\\begin{table}[ht]", "\\caption{Matrix: m}", 
       "\\label{tbl:1}", "\\centering", "\\begin{tabular}{rrr}", 
       " & 1 & 2 \\\\", "1 & 1 & 3 \\\\", 
       "2 & 2 & 4 \\\\", "\\end{tabular}", "\\end{table}"))
   
#test use.dims: accepts FALSE, "row", or "col"
test("tex.usedims.1", tex(m, use.dims = FALSE),
     c("\\begin{table}[ht]", "\\caption{Matrix: m}", "\\label{tbl:2}", 
       "\\centering", "\\begin{tabular}{rr}", "1 & 3 \\\\", "2 & 4 \\\\", 
       "\\end{tabular}", "\\end{table}"))
test("tex.usedims.2", tex(m, use.dims = "row"),
     c("\\begin{table}[ht]", "\\caption{Matrix: m}", "\\label{tbl:3}", 
       "\\centering", "\\begin{tabular}{rrr}", 
       "1 & 1 & 3 \\\\", "2 & 2 & 4 \\\\", 
       "\\end{tabular}", "\\end{table}"))
test("tex.usedims.3", tex(m, use.dims = "col"),
     c("\\begin{table}[ht]", "\\caption{Matrix: m}", "\\label{tbl:4}", 
       "\\centering", "\\begin{tabular}{rr}", "1 & 2 \\\\", "1 & 3 \\\\", 
       "2 & 4 \\\\", "\\end{tabular}", "\\end{table}"))

#test align: check validity and functionality
test("tex.align.1", tex(m, align = "lcr"),
     c("\\begin{table}[ht]", "\\caption{Matrix: m}", "\\label{tbl:5}", 
       "\\centering", "\\begin{tabular}{lcr}",
       " & 1 & 2 \\\\", "1 & 1 & 3 \\\\", 
       "2 & 2 & 4 \\\\", "\\end{tabular}", "\\end{table}"))
test("tex.align.2", tex(m, align = "R&s"), error = "^Invalid")
test("tex.align.3", tex(m, align = "rrrr"), error = "^You specified")

#test label
test("tex.label.1", tex(m, label = "tbl:mat"), 
     c("\\begin{table}[ht]", "\\caption{Matrix: m}", "\\label{tbl:mat}", 
       "\\centering", "\\begin{tabular}{rrr}", 
       " & 1 & 2 \\\\", "1 & 1 & 3 \\\\", 
       "2 & 2 & 4 \\\\", "\\end{tabular}", "\\end{table}"))
       
#test digits: functionality and validity
m.num <- matrix(1:4 * pi)
test("tex.digits.1", tex(m.num, digits = 2L),
     c("\\begin{table}[ht]", "\\caption{Matrix: m.num}", "\\label{tbl:9}", 
     "\\centering", "\\begin{tabular}{rr}", " & 1 \\\\", "1 & 3.14 \\\\", 
     "2 & 6.28 \\\\", "3 & 9.42 \\\\", "4 & 12.57 \\\\", "\\end{tabular}", 
     "\\end{table}"))
m.log <- matrix(TRUE, nrow = 2, ncol = 2)
test("tex.digits.2", tex(m.log, digits = 2L), warning = "is not numeric")

#test caption
test("tex.caption.1", tex(m, caption = "Matrix Output"),
     c("\\begin{table}[ht]", "\\caption{Matrix Output}", "\\label{tbl:11}", 
       "\\centering", "\\begin{tabular}{rrr}",
       " & 1 & 2 \\\\", "1 & 1 & 3 \\\\", 
       "2 & 2 & 4 \\\\", "\\end{tabular}", "\\end{table}"))

#test hline.after: check validity and functionality
test("tex.hlineafter.1", tex(m, hline.after = 0:2),
     c("\\begin{table}[ht]", "\\caption{Matrix: m}", "\\label{tbl:12}", 
       "\\centering", "\\begin{tabular}{rrr}", " & 1 & 2 \\\\", "\\hline", 
       "1 & 1 & 3 \\\\", "\\hline", "2 & 2 & 4 \\\\",
       "\\hline", "\\end{tabular}", "\\end{table}"))
test("tex.hlineafter.2", tex(m, hline.after = 6), error = "^Row ")
test("tex.hlineafter.3", tex(m, hline.after = 5:6), error = "^Rows ")
test("tex.hlineafter.4", tex(m, use.dims = FALSE, hline.after = -1),
     error = "Please use.*col")

#test vline.after: check validity and functionality
test("tex.vlineafter.1", tex(m, vline.after = 0:2), 
     c("\\begin{table}[ht]", "\\caption{Matrix: m}", "\\label{tbl:16}", 
       "\\centering", "\\begin{tabular}{r|r|r|}",
       " & 1 & 2 \\\\", "1 & 1 & 3 \\\\", 
       "2 & 2 & 4 \\\\", "\\end{tabular}", "\\end{table}"))
test("tex.vlineafter.2", tex(m, vline.after = 6), error = "^Column ")
test("tex.vlineafter.3", tex(m, vline.after = 5:6), error = "^Columns ")
test("tex.vlineafter.4", tex(m, use.dims = FALSE, vline.after = -1),
     error = "Please use.*row")
     
#test na.char
m.na <- matrix(nrow = 2, ncol = 2)
test("tex.nachar.1", tex(m.na, na.char = "NA"),
     c("\\begin{table}[ht]", "\\caption{Matrix: m.na}", "\\label{tbl:20}", 
       "\\centering", "\\begin{tabular}{rrr}",
      " & 1 & 2 \\\\", "1 & NA & NA \\\\", 
      "2 & NA & NA \\\\", "\\end{tabular}", "\\end{table}"))

#test file
ff <- tempfile()
tex(m, file = ff)
test("tex.file.1", readLines(ff), 
     c("\\begin{table}[ht]", "\\caption{Matrix: m}", "\\label{tbl:21}", 
       "\\centering", "\\begin{tabular}{rrr}", 
       " & 1 & 2 \\\\", "1 & 1 & 3 \\\\", 
       "2 & 2 & 4 \\\\", "\\end{tabular}", "\\end{table}"))
       
#test placement: validity and functionality
test("tex.placement.1", tex(m, placement = "!htbp"),
     c("\\begin{table}[!htbp]", "\\caption{Matrix: m}", "\\label{tbl:22}", 
       "\\centering", "\\begin{tabular}{rrr}",
       " & 1 & 2 \\\\", "1 & 1 & 3 \\\\", 
       "2 & 2 & 4 \\\\", "\\end{tabular}", "\\end{table}"))
test("tex.placement.2", tex(m, placement = "xxxx"), 
     error = "^Invalid float")
     
#test options: validity and functionality
test("tex.options.1", tex(m, options = list(label = "lbl", caption = "hello",
                                            caption.placement = "bottom")),
     c("\\begin{table}[ht]", "\\centering", "\\begin{tabular}{rrr}", 
       " & 1 & 2 \\\\", "1 & 1 & 3 \\\\", "2 & 2 & 4 \\\\", "\\end{tabular}", 
       "\\caption{hello}", "\\label{lbl}", "\\end{table}"))
test("tex.options.2", tex(m, options = c(1, 2, 3)), error = "must be a named")
test("tex.options.3", tex(m, options = list(1, 2, 3)), error = "must be a named")
test("tex.options.4", tex(m, options = list(label = "lbl", 3)), error = "must be a named")
test("tex.options.5", tex(m, options = list(xxx = 4)), warning = "not recognized")
test("tex.options.6", tex(m, options = list(label = "lbl"), caption = "hello"),
     error = "Please.*alone")

#test caption.placement: validity and functionality
test("tex.captionplacement.1", tex(m, caption.placement = "bottom"),
     c("\\begin{table}[ht]", "\\centering", "\\begin{tabular}{rrr}", 
       " & 1 & 2 \\\\", "1 & 1 & 3 \\\\",
       "2 & 2 & 4 \\\\", "\\end{tabular}", 
       "\\caption{Matrix: m}", "\\label{tbl:30}", "\\end{table}"))
test("tex.captionplacement.2", tex(m, caption.placement = "below"),
     c("\\begin{table}[ht]", "\\centering", "\\begin{tabular}{rrr}", 
       " & 1 & 2 \\\\", "1 & 1 & 3 \\\\",
       "2 & 2 & 4 \\\\", "\\end{tabular}", 
       "\\caption{Matrix: m}", "\\label{tbl:31}", "\\end{table}"))
test("tex.captionplacement.3", tex(m, caption.placement = "top"),
     c("\\begin{table}[ht]", "\\caption{Matrix: m}", "\\label{tbl:32}", 
       "\\centering", "\\begin{tabular}{rrr}", 
       " & 1 & 2 \\\\", "1 & 1 & 3 \\\\", 
       "2 & 2 & 4 \\\\", "\\end{tabular}", "\\end{table}"))
test("tex.captionplacement.4", tex(m, caption.placement = "xxx"),
     error = "Invalid.*caption\\.placement")
     
#test floating.environment: functionality & options
##store user's initial value of "texr.warn.rotating"
##  so that running tests doesn't tinker with their settings
old_rotate <- getOption("texr.warn.rotating")
old_rot_tog <- getOption("texr.warn.rotating.toggle")

options("texr.warn.rotating" = FALSE)
test("tex.floatingenvironment.1", tex(m, floating.environment = "sidewaystable"),
     c("\\begin{sidewaystable}[ht]", "\\caption{Matrix: m}", "\\label{tbl:34}", 
       "\\centering", "\\begin{tabular}{rrr}", " & 1 & 2 \\\\", "1 & 1 & 3 \\\\", 
       "2 & 2 & 4 \\\\", "\\end{tabular}", "\\end{sidewaystable}"))
       
options("texr.warn.rotating" = TRUE)
options("texr.warn.rotating.toggle" = TRUE)
##seems I can't suppress the message output here...
capture.output(tex(m, floating.environment = "sidewaystable"))
##running tex again SHOULDN'T produce a message with these options
test("tex.floatingenvironment.2", 
     tryCatch(tex(m, floating.environment = "sidewaystable"), warning = identity),
     c("\\begin{sidewaystable}[ht]", "\\caption{Matrix: m}", "\\label{tbl:36}", 
       "\\centering", "\\begin{tabular}{rrr}", " & 1 & 2 \\\\", "1 & 1 & 3 \\\\", 
       "2 & 2 & 4 \\\\", "\\end{tabular}", "\\end{sidewaystable}"))

options("texr.warn.rotating" = TRUE)
options("texr.warn.rotating.toggle" = FALSE)
test("tex.floatingenvironment.3", tex(m, floating.environment = "sidewaystable"),
     message = "Remember to include.*rotating")
##running tex again SHOULD produce a message with these options
test("tex.floatingenvironment.4", tex(m, floating.environment = "sidewaystable"),
     message = "Remember to include.*rotating")
     
options("texr.warn.rotating" = FALSE)
##again, no message should be produced
test("tex.floatingenvironment.5", 
     tryCatch(tex(m, floating.environment = "sidewaystable"), warning = identity),
     c("\\begin{sidewaystable}[ht]", "\\caption{Matrix: m}", "\\label{tbl:39}", 
       "\\centering", "\\begin{tabular}{rrr}", " & 1 & 2 \\\\", "1 & 1 & 3 \\\\", 
       "2 & 2 & 4 \\\\", "\\end{tabular}", "\\end{sidewaystable}"))
#reset to user's options
options("texr.warn.rotating" = old_rotate)
options("texr.warn.rotating.toggle" = old_rot_tog)
     
#test only.body functionality
test("tex.onlybody.1", tex(m, only.body = TRUE), 
     c(" & 1 & 2 \\\\", "1 & 1 & 3 \\\\", "2 & 2 & 4 \\\\"))
     
#test line.ends functionality
test("tex.lineends.1", tex(m, line.ends = FALSE),
     c("\\begin{table}[ht]", "\\caption{Matrix: m}", "\\label{tbl:41}", 
       "\\centering", "\\begin{tabular}{rrr}", " & 1 & 2", "1 & 1 & 3", 
       "2 & 2 & 4", "\\end{tabular}", "\\end{table}"))
       
#test line.split functionality
test("tex.linesplit.1", capture.output(tex(m, line.split = "\n\n")),
     c("\\begin{table}[ht]", "", "\\caption{Matrix: m}", "", "\\label{tbl:42}", 
       "", "\\centering", "", "\\begin{tabular}{rrr}", "", " & 1 & 2 \\\\", 
       "", "1 & 1 & 3 \\\\", "", "2 & 2 & 4 \\\\", "", "\\end{tabular}", 
       "", "\\end{table}"))
     
# ***TESTS OF reset_label_count, get_label_count***
     
test("resetlabelcount.VALUE.1", reset_label_count(), 0L)
test("resetlabelcount.VALUE.2", tex(m), 
     c("\\begin{table}[ht]", "\\caption{Matrix: m}", "\\label{tbl:1}", 
       "\\centering", "\\begin{tabular}{rrr}",
       " & 1 & 2 \\\\", "1 & 1 & 3 \\\\", 
       "2 & 2 & 4 \\\\", "\\end{tabular}", "\\end{table}"))
       
test("getlabelcount.VALUE.1", get_label_count(), 1L)

# ***TESTS OF tex.table***
##most things should be covered by tex.matrix, since
##  tex.table is currently implemented essentially as
##  a call to tex.matrix; checking the minor
##  touch-up that precedes that call
reset_label_count()

oneway <- table(rep(1:3, 3:1))
twoway <- table(rep(rep(1:3, 3:1), 5), rep(rep(1:5, 5:1), 2))
test("textable.ONEDTABLE.1", tex(oneway),
     c("\\begin{table}[ht]", "\\caption{Table: oneway}", "\\label{tbl:1}", 
       "\\centering", "\\begin{tabular}{|rrr}", "1 & 2 & 3 \\\\", "\\hline", 
       "3 & 2 & 1 \\\\", "\\end{tabular}", "\\end{table}"))
test("textable.TWODTABLE.1", tex(twoway),
     c("\\begin{table}[ht]", "\\caption{Table: twoway}", "\\label{tbl:2}", 
       "\\centering", "\\begin{tabular}{r|rrrrr}", " & 1 & 2 & 3 & 4 & 5 \\\\", 
       "\\hline", "1 & 5 & 4 & 3 & 2 & 1 \\\\", "2 & 4 & 2 & 2 & 2 & 0 \\\\", 
       "3 & 1 & 2 & 1 & 0 & 1 \\\\", "\\end{tabular}", "\\end{table}"))
test("textable.caption.1", tex(oneway, caption = "One-way table"),
     c("\\begin{table}[ht]", "\\caption{One-way table}", "\\label{tbl:3}", 
       "\\centering", "\\begin{tabular}{|rrr}", "1 & 2 & 3 \\\\", "\\hline", 
       "3 & 2 & 1 \\\\", "\\end{tabular}", "\\end{table}"))
test("textable.caption.2", tex(oneway, options = list(caption = "One-way table")),
     c("\\begin{table}[ht]", "\\caption{One-way table}", "\\label{tbl:4}", 
       "\\centering", "\\begin{tabular}{|rrr}", "1 & 2 & 3 \\\\", "\\hline", 
       "3 & 2 & 1 \\\\", "\\end{tabular}", "\\end{table}"))
test("textable.hlineafter.1", tex(twoway, hline.after = c(0, 3)),
     c("\\begin{table}[ht]", "\\caption{Table: twoway}", "\\label{tbl:5}", 
       "\\centering", "\\begin{tabular}{r|rrrrr}", " & 1 & 2 & 3 & 4 & 5 \\\\", 
       "\\hline", "1 & 5 & 4 & 3 & 2 & 1 \\\\", "2 & 4 & 2 & 2 & 2 & 0 \\\\", 
       "3 & 1 & 2 & 1 & 0 & 1 \\\\", "\\hline", "\\end{tabular}", "\\end{table}"))
##also be sure that a user can fully EXCLUDE all hlines
test("textable.hlineafter.2", tex(twoway, hline.after = integer(0L)),
     c("\\begin{table}[ht]", "\\caption{Table: twoway}", "\\label{tbl:6}", 
       "\\centering", "\\begin{tabular}{r|rrrrr}", " & 1 & 2 & 3 & 4 & 5 \\\\", 
       "1 & 5 & 4 & 3 & 2 & 1 \\\\", "2 & 4 & 2 & 2 & 2 & 0 \\\\", 
       "3 & 1 & 2 & 1 & 0 & 1 \\\\", "\\end{tabular}", "\\end{table}"))
       
# ***TESTS OF tex.lm***
reset_label_count()
reg <- lm(Sepal.Length ~ Sepal.Width + Petal.Length, data = iris)

test("texlm.VALUE.1", tex(reg), 
     c("\\begin{table}[ht]", "\\caption{Regression: reg}", "\\label{reg:1}", 
       "\\centering", "\\begin{tabular}{rr}", " & Model \\\\",
       "Intercept & 2.24914016038323 \\\\", 
       " & (0.247969626756195) \\\\", "Sepal.Width & 0.595524748743591 \\\\", 
       " & (0.0693281623349654) \\\\", "Petal.Length & 0.471920039327133 \\\\", 
       " & (0.0171176790352502) \\\\", "\\end{tabular}", "\\end{table}"))
       
test("texlm.modelname.1", tex(reg, model.name = "Iris Regression"),
     c("\\begin{table}[ht]", "\\caption{Regression: reg}", "\\label{reg:2}", 
       "\\centering", "\\begin{tabular}{rr}", " & Iris Regression \\\\", 
       "Intercept & 2.24914016038323 \\\\", " & (0.247969626756195) \\\\", 
       "Sepal.Width & 0.595524748743591 \\\\", " & (0.0693281623349654) \\\\", 
       "Petal.Length & 0.471920039327133 \\\\", " & (0.0171176790352502) \\\\", 
       "\\end{tabular}", "\\end{table}"))
       
test("texlm.includese.1", tex(reg, include.se = FALSE),
     c("\\begin{table}[ht]", "\\caption{Regression: reg}", "\\label{reg:3}", 
       "\\centering", "\\begin{tabular}{rr}", " & Model \\\\",
       "Intercept & 2.24914016038323 \\\\", "Sepal.Width & 0.595524748743591 \\\\",
       "Petal.Length & 0.471920039327133 \\\\", "\\end{tabular}", "\\end{table}"))

test("texlm.cleanintercept.1", tex(reg, clean.intercept = FALSE),
     c("\\begin{table}[ht]", "\\caption{Regression: reg}", "\\label{reg:4}", 
       "\\centering", "\\begin{tabular}{rr}", " & Model \\\\",
       "(Intercept) & 2.24914016038323 \\\\", " & (0.247969626756195) \\\\",
       "Sepal.Width & 0.595524748743591 \\\\", " & (0.0693281623349654) \\\\", 
       "Petal.Length & 0.471920039327133 \\\\", " & (0.0171176790352502) \\\\",
       "\\end{tabular}", "\\end{table}"))

test("texlm.digits.1", tex(reg, digits = 0L),
     c("\\begin{table}[ht]", "\\caption{Regression: reg}", "\\label{reg:5}", 
       "\\centering", "\\begin{tabular}{rr}", " & Model \\\\", "Intercept & 2 \\\\", 
       " & (0) \\\\", "Sepal.Width & 1 \\\\", " & (0) \\\\", "Petal.Length & 0 \\\\", 
       " & (0) \\\\", "\\end{tabular}", "\\end{table}"))

##One test to verify that options passed through to tex.matrix are working as expected
test("texlm.hlineafter.1", tex(reg, hline.after = c(0L, 5L)),
     c("\\begin{table}[ht]", "\\caption{Regression: reg}", "\\label{reg:6}", 
       "\\centering", "\\begin{tabular}{rr}", " & Model \\\\", "\\hline", 
       "Intercept & 2.24914016038323 \\\\", " & (0.247969626756195) \\\\", 
       "Sepal.Width & 0.595524748743591 \\\\", " & (0.0693281623349654) \\\\", 
       "Petal.Length & 0.471920039327133 \\\\", "\\hline", 
       " & (0.0171176790352502) \\\\", "\\end{tabular}", "\\end{table}"))
